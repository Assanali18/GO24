{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample API server.",
        "title": "GO REST API WITH GORM",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/users": {
            "get": {
                "description": "Get a paginated list of users with optional filters for age and sorting in ascending or descending order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Minimum Age",
                        "name": "min_age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum Age",
                        "name": "max_age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by name in ascending or descending order",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "description": "Update user details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Profile": {
            "type": "object",
            "properties": {
                "bio": {
                    "description": "The user's bio.\nexample: Software Developer",
                    "type": "string"
                },
                "id": {
                    "description": "The profile's ID.\nexample: 1",
                    "type": "integer"
                },
                "profile_picture_url": {
                    "description": "The URL to the user's profile picture.\nexample: http://example.com/profile.jpg",
                    "type": "string"
                },
                "user_id": {
                    "description": "The ID of the user this profile belongs to.\nexample: 1",
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "age",
                "name"
            ],
            "properties": {
                "age": {
                    "description": "The user's age.\nexample: 30",
                    "type": "integer",
                    "minimum": 0
                },
                "id": {
                    "description": "The user's ID.\nexample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "The user's name.\nexample: John Doe",
                    "type": "string"
                },
                "profile": {
                    "description": "The user's profile.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Profile"
                        }
                    ]
                }
            }
        },
        "models.UserListResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "The current page number.\nexample: 1",
                    "type": "integer"
                },
                "page_size": {
                    "description": "The size of each page.\nexample: 10",
                    "type": "integer"
                },
                "total_items": {
                    "description": "The total number of users.\nexample: 100",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "The total number of pages.\nexample: 10",
                    "type": "integer"
                },
                "users": {
                    "description": "The list of users.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        }
    }
}